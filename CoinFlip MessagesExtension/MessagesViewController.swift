////
////  MessagesViewController.swift
////  CoinFlip MessagesExtension
////
////  Created by Sabeer Narula on 7/26/23.
////
//
//import UIKit
//import Messages
//import AVFoundation
//import AVKit
//
//class MessagesViewController: MSMessagesAppViewController {
//
//    var player: AVPlayer!
//    var playerViewController: AVPlayerViewController!
//    var playerContainerView: UIView!
//
//    @IBOutlet weak var FlipCoinResult: UILabel!
//
//    override func viewDidLoad() {
//        super.viewDidLoad()
//
//        player = AVPlayer(url: URL(fileURLWithPath: "/Users/sabeernarula/Desktop/coins-flip-tails.mp4"))
//        playerViewController = AVPlayerViewController()
//        playerViewController.player = player
//
//        // Create a container view for the playerViewController's view
//        playerContainerView = UIView(frame: CGRect(x: 130, y: 320, width: 250, height: 195))
//        self.view.addSubview(playerContainerView)
//
//        self.addChild(playerViewController)
//        playerContainerView.addSubview(playerViewController.view)
//        playerViewController.view.frame = playerContainerView.bounds // make it fill the container view
//        playerViewController.view.backgroundColor = UIColor.clear // clear background
//        playerViewController.didMove(toParent: self)
//    }
//
//
//    @IBAction func FlipCoinButton(_ sender: Any) {
//        let coinFlipResult = Bool.random()
//        let resultString = coinFlipResult ? "Heads" : "Tails"
//
//        FlipCoinResult.text = "\(resultString)"
//
//        let layout = MSMessageTemplateLayout()
//        layout.caption = "Coin Flip Result: \(resultString)"
//
//        let message = MSMessage()
//        message.layout = layout
//        message.url = URL(string: "https://example.com/coinflip?result=\(resultString)")
//
//        activeConversation?.insert(message, completionHandler: nil)
//
//        playerViewController.player?.seek(to: .zero)
//        playerViewController.player?.play() // play the video
//    }
//
//
//    // MARK: - Conversation Handling
//
//    override func willBecomeActive(with conversation: MSConversation) {
//        super.willBecomeActive(with: conversation)
//
//        // Check if the selected message is a coin flip result
//        if let message = conversation.selectedMessage,
//           let messageURL = message.url,
//           let components = URLComponents(url: messageURL, resolvingAgainstBaseURL: false),
//           let result = components.queryItems?.first(where: { $0.name == "result" })?.value {
//            // Update the FlipCoinResult label
//            FlipCoinResult.text = "Coin Flip Result: \(result)"
//        }
//    }
//
//
//
//    override func didResignActive(with conversation: MSConversation) {
//        // Called when the extension is about to move from the active to inactive state.
//        // This will happen when the user dismisses the extension, changes to a different
//        // conversation or quits Messages.
//
//        // Use this method to release shared resources, save user data, invalidate timers,
//        // and store enough state information to restore your extension to its current state
//        // in case it is terminated later.
//    }
//
//    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
//        // Called when a message arrives that was generated by another instance of this
//        // extension on a remote device.
//
//        // Use this method to trigger UI updates in response to the message.
//    }
//
//    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
//        // Called when the user taps the send button.
//    }
//
//    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
//        // Called when the user deletes the message without sending it.
//
//        // Use this to clean up state related to the deleted message.
//    }
//
//    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
//        // Called before the extension transitions to a new presentation style.
//
//        // Use this method to prepare for the change in presentation style.
//    }
//
//    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
//        // Called after the extension transitions to a new presentation style.
//
//        // Use this method to finalize any behaviors associated with the change in presentation style.
//    }
//
//}

import UIKit
import Messages
import AVFoundation
import AVKit
class MessagesViewController: MSMessagesAppViewController {
    
    var player: AVPlayer!
    var playerViewController: AVPlayerViewController!
    var playerContainerView: UIView!
    
    let gifURLHeads = "/Users/sabeernarula/Desktop/IMessage Coin Flip/CoinFlip/CoinFlip/coin-flip-heads.mp4"
    let gifURLTails = "/Users/sabeernarula/Desktop/IMessage Coin Flip/CoinFlip/CoinFlip/coins-flip-tails.mp4"

    @IBOutlet weak var FlipCoinResult: UILabel!
    // hi

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Initialize the player with a URL, but don't play anything yet
        player = AVPlayer()
        playerViewController = AVPlayerViewController()
        playerViewController.player = player

        // Create a container view for the playerViewController's view
        playerContainerView = UIView(frame: CGRect(x: 130, y: 320, width: 250, height: 195))
        self.view.addSubview(playerContainerView)

        self.addChild(playerViewController)
        playerContainerView.addSubview(playerViewController.view)
        playerViewController.view.frame = playerContainerView.bounds // make it fill the container view
        playerViewController.view.backgroundColor = UIColor.clear // clear background
        playerViewController.didMove(toParent: self)
    }


    
    @IBAction func FlipCoinButton(_ sender: Any) {
        // Remove the previous observer
        NotificationCenter.default.removeObserver(self, name: .AVPlayerItemDidPlayToEndTime, object: player.currentItem)

        // Now flip the coin and display the result
        let coinFlipResult = Bool.random()
        let resultString = coinFlipResult ? "Heads" : "Tails"
        let videoName = coinFlipResult ? "coin-flip-heads" : "coins-flip-tails"

        FlipCoinResult.text = "\(resultString)"
        
        if let videoURL = Bundle.main.url(forResource: videoName, withExtension: "mp4") {
            player = AVPlayer(url: videoURL)
            
            // Add the new observer
            NotificationCenter.default.addObserver(self, selector: #selector(playerDidFinishPlaying), name: .AVPlayerItemDidPlayToEndTime, object: player.currentItem)

            playerViewController.player = player
            playerViewController.player?.seek(to: .zero)
            playerViewController.player?.play() // play the video

            // Create a message ready to be sent
            let layout = MSMessageTemplateLayout()
            layout.caption = "Flipping a coin..."
            layout.mediaFileURL = videoURL

            let message = MSMessage()
            message.layout = layout

            activeConversation?.insert(message, completionHandler: nil)
        }
    }

    
    @objc func playerDidFinishPlaying(_ notification: Notification) {
        if let playerItem = notification.object as? AVPlayerItem {
            playerItem.seek(to: CMTimeMakeWithSeconds(0, preferredTimescale: 600), completionHandler: nil)
            player.pause()
        }
    }

    deinit {
        NotificationCenter.default.removeObserver(self)
    }

}
